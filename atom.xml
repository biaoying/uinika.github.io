<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bit by bit</title>
  
  <subtitle>Electronics, Embedded &amp; Web</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://uinika.github.io/"/>
  <updated>2020-05-21T15:28:49.754Z</updated>
  <id>https://uinika.github.io/</id>
  
  <author>
    <name>Hank</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Webpack 4 核心剖析</title>
    <link href="https://uinika.github.io/Web/Webpack.html"/>
    <id>https://uinika.github.io/Web/Webpack.html</id>
    <published>2020-05-21T13:39:03.892Z</published>
    <updated>2020-05-21T15:28:49.754Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://webpack.js.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Webpack&lt;/a&gt;&lt;/strong&gt; 是现代 Web 应用程序的静态模块打包工具，它会递归的构建应用程序各个模块的依赖关系图，然后将所有模块打包成一个或多个&lt;code&gt;bundle&lt;/code&gt;。目前 Webpack 已经更新至 &lt;strong&gt;4.29.6&lt;/strong&gt; 版本，增加了诸多打包和执行性能相关的支持，是目前应用最广泛、社区最活跃的 Web 前端代码打包方案。而更新版本的 Webpack 5 已经进入 Beta 发布阶段，未来将会带来更多构建性能的提升，本文依然以更为稳定的 Webpack 4 为讲解对象。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Web/Webpack/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Webpack 提出了&lt;strong&gt;入口&lt;/strong&gt;&lt;code&gt;entry&lt;/code&gt;、&lt;strong&gt;输出&lt;/strong&gt;&lt;code&gt;output&lt;/code&gt;、&lt;strong&gt;加载器&lt;/strong&gt;&lt;code&gt;loader&lt;/code&gt;、&lt;strong&gt;插件&lt;/strong&gt;&lt;code&gt;plugin&lt;/code&gt;这四个核心概念，本文将会在简单介绍 Webpack 相关基础概念之后，对其原生实现的&lt;code&gt;import&lt;/code&gt;模块导入机制进行分析，以清晰的展现 Wepback 在底层所进行的工作；最后逐步备注笔者在开发、生产环境下使用到的各类插件和加载器，并分享在&lt;a href=&quot;https://github.com/uinika/aves&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;aves&lt;/a&gt;和&lt;a href=&quot;https://github.com/uinika/rhino&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;rhino&lt;/a&gt;两个开源脚手架项目当中（&lt;em&gt;分别基于 Vue2 和 React16&lt;/em&gt;）所使用到的最佳配置实践。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://uinika.github.io/categories/Web/"/>
    
    
      <category term="JavaScript" scheme="https://uinika.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Windows 工作环境 Config 札记</title>
    <link href="https://uinika.github.io/Zen/Config-Windows.html"/>
    <id>https://uinika.github.io/Zen/Config-Windows.html</id>
    <published>2020-05-21T13:39:03.892Z</published>
    <updated>2020-05-24T12:59:44.540Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;开发人员长期以来对于 Microsoft Windows 操作系统总抱以嗤之以鼻的态度，笔者亲身经历了&lt;code&gt;Windows XP&lt;/code&gt;、&lt;code&gt;Windows 7&lt;/code&gt;到&lt;code&gt;Windows 10&lt;/code&gt;的版本演变过程，抛开众所周知的偏见，事实上是能够感觉到系统稳定性、用户体验方面的大幅改善的，叠加近年来 &lt;a href=&quot;http://cmder.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Cmder&lt;/strong&gt;&lt;/a&gt;、&lt;a href=&quot;https://neovim.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Neovim&lt;/strong&gt;&lt;/a&gt; 等辅助开发工具的出现与逐渐成熟，作为软件开发环境，其使用体验已经完全可以与 Linux 媲美，并在图形界面的稳定性以及交互的友好性方面胜于后者。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Zen/Config-Windows/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;但是对于广大硬件电子工程师而言，&lt;strong&gt;Altium Designer&lt;/strong&gt;、&lt;strong&gt;Pads&lt;/strong&gt;、&lt;strong&gt;Allegro&lt;/strong&gt; 等商业 EDA 工具仅提供支持 Windows 操作系统的版本，而高频高速 PCB 电路设计基本离不开 Windows 操作系统环境，因而 Windows 和 Linux 在笔者日常工作里都各自拥有着其不可替代性。本文主要用于记录一些笔者使用 Windows 10 操作系统的配置和习惯，便于切换到新的工作环境时快速的展开，因而文章也会持续的保持更新。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Zen" scheme="https://uinika.github.io/categories/Zen/"/>
    
    
      <category term="Windows Config" scheme="https://uinika.github.io/tags/Windows-Config/"/>
    
  </entry>
  
  <entry>
    <title>Linux 工作环境 Config 札记</title>
    <link href="https://uinika.github.io/Zen/Config-Linux.html"/>
    <id>https://uinika.github.io/Zen/Config-Linux.html</id>
    <published>2020-05-21T13:39:03.892Z</published>
    <updated>2020-05-21T13:39:03.892Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;使用 Linux 作为日常&lt;strong&gt;开发&lt;/strong&gt;和&lt;strong&gt;工作&lt;/strong&gt;环境近 5 年时间，尝试过&lt;code&gt;Debian&lt;/code&gt;、&lt;code&gt;Fedora&lt;/code&gt;、&lt;code&gt;Ubuntu&lt;/code&gt;、&lt;code&gt;Mint&lt;/code&gt;等桌面发行版。虽然 Linux 作为服务器运行稳定可靠，但是在桌面 GUI 体验一直有待改进，显卡驱动兼容性与 CPU 占用率过高等问题一直悬而未决。而日常工作当中经常需要使用到的&lt;code&gt;Altium Designer&lt;/code&gt;、&lt;code&gt;Keil uVision&lt;/code&gt;等商业软件仅提供 Windows 10 版本，因此笔者时常需要在两款操作系统之间来回进行切换。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Zen/Config-Linux/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Linux Mint 提供了嵌入式开发当中必不可少的交叉编译环境，也能够直接安装 &lt;code&gt;KiCAD&lt;/code&gt;、&lt;code&gt;STM32CubeIDE&lt;/code&gt;、&lt;code&gt;VSCode&lt;/code&gt;、&lt;code&gt;Sublime&lt;/code&gt; 等生产力工具；Windows 10 则提供了 &lt;code&gt;Altium Designer&lt;/code&gt;、开发板串口驱动等大量无法跨平台使用的商业软件支持。本文主要用于备注两款操作系统当中一些常用的开发与工作环境配置，便于后续在全新工作环境中展开部署，以方便的移植个性化的使用习惯至新设备。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Zen" scheme="https://uinika.github.io/categories/Zen/"/>
    
    
      <category term="Linux Config" scheme="https://uinika.github.io/tags/Linux-Config/"/>
    
  </entry>
  
  <entry>
    <title>SCSS 3.5.5 简明上手指南</title>
    <link href="https://uinika.github.io/Web/Scss.html"/>
    <id>https://uinika.github.io/Web/Scss.html</id>
    <published>2020-05-21T13:39:03.876Z</published>
    <updated>2020-05-21T15:33:26.888Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://sass-lang.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sass&lt;/a&gt;&lt;/strong&gt; 是成熟、稳定、强大的&lt;strong&gt;CSS 预处理器&lt;/strong&gt;，截止到目前为止已经发展有 10 年，前当最新 release 版本为&lt;code&gt;3.5.5&lt;/code&gt;。而&lt;strong&gt;SCSS&lt;/strong&gt;是&lt;strong&gt;Sass3&lt;/strong&gt;版本当中引入的新语法特性，完全兼容 CSS3 的同时继承了&lt;strong&gt;Sass&lt;/strong&gt;强大的动态功能。本文翻译自&lt;a href=&quot;http://sass-lang.com/guide&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Sass Guide》&lt;/a&gt;和&lt;a href=&quot;http://sass-lang.com/documentation/file.SASS_REFERENCE.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Sass Syntactically Awesome StyleSheets》&lt;/a&gt;两篇官方文档，讲解了现代化前端开发当中经常使用的 SCSS 语法特性，便于开发小组的同学快速上手。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Web/Scss/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;基于 Gulp 完成前端自动化的年代，出于快速上手以及 npm 安装方便的考虑，开发团队一直沿用&lt;a href=&quot;http://lesscss.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Less&lt;/a&gt;和&lt;a href=&quot;https://github.com/stevelacy/gulp-less&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gulp-less&lt;/a&gt;作为 CSS 预处理工具，但是 Sass 提供了更加丰富的动态语法特征，因此逐步淘汰基于 Gulp 的&lt;a href=&quot;https://github.com/uinika/beaver&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;beaver&lt;/a&gt;前端项目脚手架以后，新项目全部基于 Webpack 的&lt;a href=&quot;https://github.com/sass/node-sass&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;node-sass&lt;/a&gt;和&lt;a href=&quot;https://github.com/webpack-contrib/sass-loader&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sass-loader&lt;/a&gt;作为预处理工具。Sass 和 Less 的详细比较可以参考&lt;a href=&quot;https://css-tricks.com/sass-vs-less/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sass-vs-less&lt;/a&gt;和&lt;a href=&quot;http://cued.xunlei.com/log044&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sass 与 Less 比拼&lt;/a&gt;两篇文章，里面对两者的优劣做了非常详实的比较。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://uinika.github.io/categories/Web/"/>
    
    
      <category term="CSS" scheme="https://uinika.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Vue 2 技术栈归纳与精粹</title>
    <link href="https://uinika.github.io/Web/Vue.html"/>
    <id>https://uinika.github.io/Web/Vue.html</id>
    <published>2020-05-21T13:39:03.876Z</published>
    <updated>2020-05-21T13:39:03.876Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Vue 是一款&lt;strong&gt;高度封装的&lt;/strong&gt;、&lt;strong&gt;开箱即用的&lt;/strong&gt;、&lt;strong&gt;一栈式的前端框架&lt;/strong&gt;，既可以结合 webpack 进行编译式前端开发，也适用基于 gulp、grunt 等自动化工具直接挂载至&lt;code&gt;全局window&lt;/code&gt;使用。本文成文于 Vue2.4.x 版本发布之初，笔者生产环境当前使用的最新版本为 &lt;code&gt;2.5.2&lt;/code&gt;。在经历多个前端重度交互项目的开发实践之后，笔者结合官方文档对 Vue 技术栈进行了全面的梳理、归纳和注解，因此本文可以作为 Vue2 官方&lt;a href=&quot;https://vuejs.org/v2/guide/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Get Started》&lt;/a&gt; 的补充性读物。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Web/Vue/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Vue2.2.x&lt;/code&gt;发布之后，其框架体系及技术栈日趋完善，相较于&lt;code&gt;React+Reflux/Redux/MobX&lt;/code&gt;技术栈，Vue 更加贴近 W3C 技术规范（&lt;em&gt;例如实现仍处于 W3C 草案阶段的&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt;、&lt;code&gt;is&lt;/code&gt;等新特性，提供了良好易用的模板书写环境&lt;/em&gt;），并且开源生态更加完整并易于配置，将 React 大量手动编码处理的位置，整合成为最佳实践并抽象为简单的语法糖（比如 Vuex 中提供的&lt;code&gt;store&lt;/code&gt;的模块化特性），使得开发人员得以将注意力聚焦于业务逻辑本身。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://uinika.github.io/categories/Web/"/>
    
    
      <category term="JavaScript" scheme="https://uinika.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS 快速上手指南</title>
    <link href="https://uinika.github.io/Web/Nodejs.html"/>
    <id>https://uinika.github.io/Web/Nodejs.html</id>
    <published>2020-05-21T13:39:03.860Z</published>
    <updated>2020-05-21T13:39:03.860Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;NodeJS&lt;/strong&gt; 开源项目于 2009 年由 &lt;strong&gt;Google Brain&lt;/strong&gt; 团队的软件工程师 Ryan Dahl 发起创建，后被美国云计算企业 &lt;a href=&quot;https://www.joyent.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Joyent&lt;/a&gt; 招入麾下，2015 年后正式被 &lt;a href=&quot;https://foundation.nodejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NodeJS 基金会&lt;/a&gt; 接管，三星公司于 2016 年完成了对 Joyent 的收购。经过将近 10 年的发展，NodeJS 已经成为现代化前端开发过程中不可或缺的基础架构，即可以作为页面渲染的分布式服务器，也可以作为前端自动化的宿主环境。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Web/Nodejs/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文基于笔者在 2015 年所写的一篇读书笔记整理，彼时 &lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;node.js&lt;/a&gt; 的版本号还停留在&lt;code&gt;v0.12.x&lt;/code&gt;，社区也还未完成与 &lt;a href=&quot;https://iojs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;io.js&lt;/a&gt; 的最终合并，文中出现的部分 API 时至今日已经被废弃或者迁移。但是这些 API 层面的变化都可以对照 &lt;a href=&quot;https://nodejs.org/dist/latest-v8.x/docs/api/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《官方文档》&lt;/a&gt;找到相应说明以及替代 API，总体上并不会影响通过本文快速了解 NodeJS 的全套技术栈特性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://uinika.github.io/categories/Web/"/>
    
    
      <category term="Server" scheme="https://uinika.github.io/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>言简意赅 の Python3</title>
    <link href="https://uinika.github.io/Web/Python.html"/>
    <id>https://uinika.github.io/Web/Python.html</id>
    <published>2020-05-21T13:39:03.860Z</published>
    <updated>2020-05-21T13:39:03.860Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Python 诞生于 20 世纪 90 年代初，由荷兰人 Guido van Rossum 开发完成，是一款非常简洁易读的解释型脚本语言；擅长于科学计算与图形处理，传统的计算机视觉库&lt;a href=&quot;https://opencv.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OpenCV&lt;/a&gt;、三维可视化库&lt;a href=&quot;https://www.vtk.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VTK&lt;/a&gt;、医学图像处理库&lt;a href=&quot;https://itk.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ITK&lt;/a&gt;都提供了 Python 调用接口，Python 也原生提供了&lt;a href=&quot;http://www.numpy.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NumPy&lt;/a&gt;、&lt;a href=&quot;https://www.scipy.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SciPy&lt;/a&gt;、&lt;a href=&quot;https://matplotlib.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;matplotlib&lt;/a&gt;等强大的科学计算扩展库。Web 开发方面，Python 也提供有&lt;a href=&quot;https://www.Djangoproject.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Django&lt;/a&gt;、&lt;a href=&quot;http://www.tornadoweb.org/en/stable/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tornado&lt;/a&gt;两款常用的 Web 开发框架。总而言之，得益于强大的开源社区支持，Python 已经成为一门功能丰富的胶水语言。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Web/Python/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文的示例代码基于目前最新的&lt;a href=&quot;https://www.python.org/downloads/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python 3.6.6&lt;/a&gt;版本，在简单介绍相关语法以及&lt;a href=&quot;https://pypi.org/project/pip/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pip&lt;/a&gt;、&lt;a href=&quot;https://virtualenv.pypa.io/en/stable/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;virtualenv&lt;/a&gt;等扩展库的使用之后，将会最终完成一个基于官方 XML 解析库&lt;code&gt;ElementTree&lt;/code&gt;的 SVG 图片合并小程序。本文涉及的代码和 Markdown 都已经上传至笔者的&lt;a href=&quot;https://github.com/uinika/python-quick-guide&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github&lt;/a&gt;，需要的朋友可以直接进行克隆，如果发现缪误或有任何建议请向我提交&lt;a href=&quot;https://github.com/uinika/python-quick-guide/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;issue&lt;/a&gt;。此外，笔者正在撰写[&lt;a href=&quot;https://uinika.github.io/web/server/django.html&quot;&gt;《使用 Django2 快速开发 Web 项目》&lt;/a&gt;一文，供需要使用 Python 进行 Web 开发的朋友进一步阅读。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://uinika.github.io/categories/Web/"/>
    
    
      <category term="Server" scheme="https://uinika.github.io/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>React 16.6.x 全新全译</title>
    <link href="https://uinika.github.io/Web/React.html"/>
    <id>https://uinika.github.io/Web/React.html</id>
    <published>2020-05-21T13:39:03.860Z</published>
    <updated>2020-05-21T13:39:03.860Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;全文翻译自&lt;a href=&quot;https://reactjs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;React 16.6.0 英文文档&lt;/a&gt;，适当精简了生产环境不经常使用的内容，并对部分较为复杂的概念进行了更加翔实的解读，以及与 Vue2 进行了一些特性方面的比较。本文首先会介绍&lt;strong&gt;React 16&lt;/strong&gt;带来的一系列变化与新特性，然后解读 React 官方文档&lt;a href=&quot;https://reactjs.org/docs/hello-world.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Docs&lt;/a&gt;当中&lt;strong&gt;Quick Start&lt;/strong&gt;和&lt;strong&gt;Advanced Guides&lt;/strong&gt;的内容，最后基于项目上的使用实践，开源了一个较为完整的&lt;strong&gt;&lt;a href=&quot;https://github.com/uinika/rhino.git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;脚手架项目Rhino&lt;/a&gt;&lt;/strong&gt;，适合已经具备&lt;strong&gt;组件式&lt;/strong&gt;前端框架开发经验的同学快速上手。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Web/React/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;2017 年 9 月 &lt;strong&gt;Facebook&lt;/strong&gt; 释出&lt;code&gt;React v16.0.x&lt;/code&gt;，宣布使用对商业使用更加友好的 &lt;a href=&quot;https://mit-license.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;MIT license&lt;/strong&gt;&lt;/a&gt; 开源许可，并带来了全新的&lt;code&gt;render()&lt;/code&gt;函数返回类型、更加健壮的错误处理机制、全新的&lt;code&gt;Fragment&lt;/code&gt;和&lt;code&gt;Portal&lt;/code&gt; 特性，并完全重写了类库的核心架构，带来更为优异服务器端渲染性能的同时，有效缩小了类库代码本身的体积，更重要的意义在于杜绝了 &lt;a href=&quot;https://github.com/developit/preact&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Preact&lt;/strong&gt;&lt;/a&gt; 等衍生框架对 React 社区所造成的分裂。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://uinika.github.io/categories/Web/"/>
    
    
      <category term="JavaScript" scheme="https://uinika.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 协议深入解析</title>
    <link href="https://uinika.github.io/Web/Http.html"/>
    <id>https://uinika.github.io/Web/Http.html</id>
    <published>2020-05-21T13:39:03.845Z</published>
    <updated>2020-05-21T13:39:03.845Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.w3.org/Protocols/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HTTP&lt;/a&gt; 是基于 &lt;strong&gt;TCP/IP&lt;/strong&gt; 协议而建立 Web 基础协议，从 1989 年早期的简单 &lt;strong&gt;HTTP/0.9&lt;/strong&gt; 单行协议开始，至 1996 年逐步扩展了状态码、协议头等特性发展到 &lt;strong&gt;HTTP/1.0&lt;/strong&gt;，然后在 1997 年的 &lt;strong&gt;HTTP/1.1&lt;/strong&gt; 增加了 TCP 连接复用、流水线支持、响应分块、缓存控制、内容协商等特性。2015 年 &lt;strong&gt;HTTP/2&lt;/strong&gt; 协议正式标准化之后，传统 HTTP 的文本协议被二进制协议替代，让并行的请求在同 1 个 TCP 连接中处理，并移除了&lt;code&gt;header&lt;/code&gt;中的重复数据，大幅提升通信效率。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Web/Http/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;在各类现代化 Web 服务器与开发框架群雄并起的年代，无论是 Python 的&lt;a href=&quot;https://www.djangoproject.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Django&lt;/a&gt;、&lt;a href=&quot;http://www.tornadoweb.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tornado&lt;/a&gt;，还是 Java 的&lt;a href=&quot;http://www.oracle.com/technetwork/java/index-jsp-135475.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Servlet&lt;/a&gt;或者是 Go 上的&lt;a href=&quot;https://beego.me/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;BeeGo&lt;/a&gt;，其本质上都是基于&lt;a href=&quot;https://www.w3.org/Protocols/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HTTP 协议&lt;/a&gt;的封装。因此了解 HTTP 相关协议规范能够提升 Web 开发的透明度，能够从协议角度理解 Web 报文的通信过程，而非仅仅从各类 Web 开发框架及其 API 封装的角度。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://uinika.github.io/categories/Web/"/>
    
    
      <category term="Convention" scheme="https://uinika.github.io/tags/Convention/"/>
    
  </entry>
  
  <entry>
    <title>概览 HTML 5 语义化标签</title>
    <link href="https://uinika.github.io/Web/Html.html"/>
    <id>https://uinika.github.io/Web/Html.html</id>
    <published>2020-05-21T13:39:03.845Z</published>
    <updated>2020-05-21T13:39:03.845Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文翻译自 Mozilla 社区的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《HTML Reference》&lt;/a&gt;，包含了 &lt;strong&gt;HTML5&lt;/strong&gt; 新增的元素标签及属性，并对使用场景、语义化用法进行了简要说明，便于快速定位日常开发所需要的 HTML 标签，书写更加优雅的语义化 DOM 结构。本文所涉及的 HTML 元素全部通过 &lt;a href=&quot;https://caniuse.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Can I use&lt;/strong&gt;&lt;/a&gt; 进行了兼容性校对，在标注各个 HTML 元素兼容性状态的同时，提供了 &lt;strong&gt;W3C&lt;/strong&gt; 和 &lt;strong&gt;Mozilla&lt;/strong&gt; 推荐的标准 Demo 用例，便于快速开发格式良好的 Web 页面，体现更加&lt;strong&gt;语义化&lt;/strong&gt;的文档结构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Web/Html/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;HTML 超文本标记语言（&lt;em&gt;Hypertext Markup Language&lt;/em&gt;）是构建 Web 页面的基石，用于结构化的组织页面元素与内容，可以嵌入图像、视频等多媒体，也可以用于创建交互式表单，并在一定程度上描述文档的外观和语义。&lt;strong&gt;HTML 语义化&lt;/strong&gt;（&lt;em&gt;Semantic HTML&lt;/em&gt;）则是指合理的使用 HTML 元素编写 Web 页面内容，&lt;strong&gt;强调 Web 页面编码信息的含义凌驾于其表现样式之上&lt;/strong&gt;，有利于 Web 浏览器执行规范化解析，改善网页文档的可访问性，方便搜索引擎爬虫索引。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://uinika.github.io/categories/Web/"/>
    
    
      <category term="HTML" scheme="https://uinika.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>jQuery 那些容易被忽略的问题</title>
    <link href="https://uinika.github.io/Web/JQuery.html"/>
    <id>https://uinika.github.io/Web/JQuery.html</id>
    <published>2020-05-21T13:39:03.845Z</published>
    <updated>2020-05-21T13:39:03.845Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;伴随&lt;code&gt;Vue&lt;/code&gt;、&lt;code&gt;Angular&lt;/code&gt;、&lt;code&gt;React&lt;/code&gt;等编译式前端框架的崛起，前端开发人员逐渐从繁琐的 DOM 操作当中解脱出来。但是在项目实践过程当中，依然存有诸多问题需要通过直接操作 DOM 来解决，虽然现代化浏览器已经支持&lt;code&gt;selectAll()&lt;/code&gt;等 HTML5 新特性，但是针对一些强调页面兼容性的场景，为了屏蔽各款浏览器解析引擎所遵循规范的差异，依然需要借助于&lt;code&gt;jQuery&lt;/code&gt;来完成 DOM 文档操作。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Web/JQuery/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;因此&lt;code&gt;jQuery&lt;/code&gt;这款诞生于 2006 年的 JavaScript 库，依然在&lt;strong&gt;现代化前端开发&lt;/strong&gt;当中扮演着较为重要角色。本文结合笔者 Web 前端开发工作当中积累的实践经验，较为系统的总结了&lt;code&gt;jQuery&lt;/code&gt;实践过程当中一些比较容易被开发人员所忽略的问题。例如 jQuery 对象与 DOM 对象的相互转换、jQuery 选择器性能、异步对象&lt;code&gt;$.Deferred()&lt;/code&gt;以及 JavaScript 性能优化相关的话题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://uinika.github.io/categories/Web/"/>
    
    
      <category term="JavaScript" scheme="https://uinika.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 6 简明语法书</title>
    <link href="https://uinika.github.io/Web/Javascript.html"/>
    <id>https://uinika.github.io/Web/Javascript.html</id>
    <published>2020-05-21T13:39:03.845Z</published>
    <updated>2020-05-21T13:39:03.845Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript 遵循了 ECMAScript 语言规范，2012 年之后的现代浏览器都完整支持 &lt;strong&gt;ECMAScript 5.1&lt;/strong&gt; 标准。2015 年 6 月 17 日，ECMA 国际组织发布了 &lt;strong&gt;ECMAScript 6&lt;/strong&gt; 标准，官方称为 &lt;strong&gt;ECMAScript 2015&lt;/strong&gt;（俗称为 &lt;strong&gt;ES6&lt;/strong&gt;），从此 ECMAScript 每年发布一次新标准，&lt;strong&gt;本文覆盖了当前最新 ECMAScript2017 草案中的新特性&lt;/strong&gt;。示例代码和术语定义参考了《JavaScrip 高级程序设计》，但是该书成文于 ES6 发布之前，因此从&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Mozilla JavaScript Reference》&lt;/a&gt;摘取了部分内容作为补充。出于查阅与核对的方便，本文目录结构与 Mozilla 官方英文文档保持一致。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Web/Javascript/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;JavaScript 标准化工作由&lt;strong&gt;ECMA&lt;/strong&gt;（&lt;em&gt;European Computer Manufacturers Association&lt;/em&gt;）国际组织负责，JavaScript 的语言标准被称为&lt;strong&gt;ECMAScript&lt;/strong&gt;，企业遵循该标准开发各自的 JavaScript 实现，例如 Firefox 的&lt;code&gt;SpiderMonkey&lt;/code&gt;或者 Chrome 中的&lt;code&gt;V8&lt;/code&gt;解析引擎（&lt;em&gt;ECMAScript 的规范文档主要针对解析引擎的开发人员，而非 JavaScript 脚本的编写人员&lt;/em&gt;）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://uinika.github.io/categories/Web/"/>
    
    
      <category term="JavaScript" scheme="https://uinika.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用 Electron 打造跨平台桌面应用</title>
    <link href="https://uinika.github.io/Web/Electron.html"/>
    <id>https://uinika.github.io/Web/Electron.html</id>
    <published>2020-05-21T13:39:03.829Z</published>
    <updated>2020-05-21T13:39:03.829Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;早期桌面应用的开发主要借助原生 C/C++ API 进行，由于需要反复经历编译过程，且无法分离界面 UI 与业务代码，开发调试极为不便。后期出现的 QT 和 WPF 在一定程度上解决了界面代码分离和跨平台的问题，却依然无法避免较长时间的编译过程。近几年伴随互联网行业的迅猛发展，尤其是 NodeJS、Chromium 这类基于 W3C 标准开源应用的不断涌现，原生代码与 Web 浏览器开发逐步走向融合，Electron 正是在这种背景下诞生的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Web/Electron/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Electron 是由 Github 开发，通过将&lt;a href=&quot;www.chromium.org&quot;&gt;Chromium&lt;/a&gt;和&lt;a href=&quot;https://nodejs.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NodeJS&lt;/a&gt;整合为一个运行时环境，实现使用 HTML、CSS、JavaScript 构建跨平台的桌面应用程序的目的。Electron 源于 2013 年 Github 社区提供的开源编辑器 Atom，后于 2014 年在社区开源，并在 2016 年的 5 月和 8 月，通过了 &lt;a href=&quot;https://www.apple.com/mac/app-store/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mac App Store&lt;/a&gt; 和 &lt;a href=&quot;https://apps.microsoft.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Windows Store&lt;/a&gt; 的上架许可，VSCode、Skype 等著名开源或商业应用程序，都是基于 Electron 打造。为了方便编写测试用例，笔者在 Github 搭建了一个简单的 Electron 种子项目&lt;a href=&quot;https://github.com/uinika/octopus&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Octopus&lt;/a&gt;，读者可以基于此来运行本文涉及的示例代码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://uinika.github.io/categories/Web/"/>
    
    
      <category term="Server" scheme="https://uinika.github.io/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>Flux 数据流两三事儿</title>
    <link href="https://uinika.github.io/Web/Flux.html"/>
    <id>https://uinika.github.io/Web/Flux.html</id>
    <published>2020-05-21T13:39:03.829Z</published>
    <updated>2020-05-21T13:39:03.829Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://facebook.github.io/flux/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Flux&lt;/a&gt;是由 &lt;strong&gt;Facebook&lt;/strong&gt; 在 2014 年 7 月提出的一种 React 应用体系架构，主要用于解决多层级组件之间数据传递以及状态管理的问题。并由此派生出了&lt;a href=&quot;https://github.com/reflux/refluxjs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Reflux&lt;/a&gt;、&lt;a href=&quot;http://redux.js.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Redux&lt;/a&gt;、&lt;a href=&quot;https://mobx.js.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MobX&lt;/a&gt;等一系列单向数据流框架。为 Web 前端页面实现组件化拆分之后，组件间的通信与协同机制提供了一套较为完善的方法学。其核心理念在于将所有应用状态放置在&lt;code&gt;Store&lt;/code&gt;内进行统一管理，视图层组件只能通过触发&lt;code&gt;Action&lt;/code&gt;修改&lt;code&gt;Store&lt;/code&gt;中的应用状态。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Web/Flux/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文首先系统的概括 Facebook 官方的&lt;strong&gt;Flux&lt;/strong&gt;以及&lt;strong&gt;单向数据流&lt;/strong&gt;思想，然后遵循近几年&lt;strong&gt;Flux 衍生框架&lt;/strong&gt;的发展历程，逐步进行概括性的分析与比较，并顺带介绍了 Vue 技术栈当中的&lt;strong&gt;类 Flux 框架&lt;/strong&gt; &lt;a href=&quot;https://vuex.vuejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;VueX&lt;/a&gt;，最后，由于通常将&lt;code&gt;Action&lt;/code&gt;视为 &lt;strong&gt;Flux&lt;/strong&gt; 工作流的核心与起点，本文还对&lt;a href=&quot;https://github.com/redux-utilities/flux-standard-action&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Flux Standard Action》&lt;/a&gt;自述文档进行了翻译，以期更为全面的展现 Flux 生态的演进过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://uinika.github.io/categories/Web/"/>
    
    
      <category term="JavaScript" scheme="https://uinika.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS 3.0 新增特性集锦</title>
    <link href="https://uinika.github.io/Web/CSS3.html"/>
    <id>https://uinika.github.io/Web/CSS3.html</id>
    <published>2020-05-21T13:39:03.814Z</published>
    <updated>2020-05-21T13:39:03.814Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;现代 CSS 开发当中所面临的挑战，已不在于如何绕过各类转瞬即逝的浏览器兼容性 bug，而在于保证灵活、轻量、易维护的前提下，尽可能符合标准的将 CSS 特性转化为网页中的各种交互创意&lt;/strong&gt;。阅读 W3C 工作组成员&lt;a href=&quot;https://github.com/LeaVerou&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lea Verou&lt;/a&gt;的&lt;strong&gt;《CSS 揭秘》&lt;/strong&gt;之后，开始重新审视前端重度交互下 CSS 提供的各类最新特性，在系统的参考 Mozilla 的&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Reference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CSS Reference&lt;/a&gt;之后，结合&lt;a href=&quot;https://www.w3.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;W3C 规范&lt;/a&gt;对常用 CSS 3.0 特性进行逐步的归纳与说明。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Web/CSS3/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于 CSS 2.1 以后的规范越来越庞大，因而 W3C 工作组将这些规范打散到不同的模块，每个模块都独立在进行版本更新。首先所有 CSS2.1 特性模块都被升级至&lt;strong&gt;3&lt;/strong&gt;作为版本号，其次全新的功能模块将从版本号&lt;em&gt;1&lt;/em&gt;开始定义。因此 CSS 3.0 并非真正意义上的 W3C 规范，准确的描述应是&lt;strong&gt;CSS 标准规范第 3 版与部分版本号为 1 的新规范的集合&lt;/strong&gt;。因为目前 CSS 规范的各个模块版本更新速度不尽相同，所以后续将很难再给予准确的版本号描述。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://uinika.github.io/categories/Web/"/>
    
    
      <category term="CSS" scheme="https://uinika.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>使用 Django2 快速开发 Web 服务</title>
    <link href="https://uinika.github.io/Web/Django.html"/>
    <id>https://uinika.github.io/Web/Django.html</id>
    <published>2020-05-21T13:39:03.814Z</published>
    <updated>2020-05-21T13:39:03.814Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.djangoproject.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Django&lt;/a&gt;是一款基于 Python 编写并且采用 MVC 设计模式的开源的 Web 应用框架，早期是作为劳伦斯出版集团新闻网站的 CMS 内容管理系统而开发，后于 &lt;strong&gt;2005 年 7 月&lt;/strong&gt; 在 BSD 许可协议下开源，并于 &lt;strong&gt;2017 年 12 月 2 日&lt;/strong&gt; 发布 2.0 正式版。虽然近几年 Go 语言在 Web 开发领域异军突起，但是在框架成熟度以及语言生态方面与 Python 还存有一定差距，针对于需要快速开发的原型类项目以及性能要求不高的 CMS 和 Admin 类型项目，已经发展了 12 年之久的 Django 依然是非常明智的选择。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Web/Django/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文基于&lt;a href=&quot;https://docs.djangoproject.com/en/2.1/intro/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Django 官方 Tutorials》&lt;/a&gt;以及&lt;a href=&quot;https://www.django-rest-framework.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Django REST framework 官方 Tutorials》&lt;/a&gt;编写，发稿时所使用的 Django 版本为&lt;code&gt;2.1.4&lt;/code&gt;，Python 版本为&lt;code&gt;3.6.6&lt;/code&gt;，文中涉及的代码都已经由笔者验证运行通过，最终形成了一个简单项目并推送至笔者&lt;a href=&quot;https://github.com/uinika&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github&lt;/a&gt;上的&lt;a href=&quot;https://github.com/uinika/jungle&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jungle&lt;/a&gt;项目当中，需要的朋友可以基于此来逐步步完善成为一个产品化的项目。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://uinika.github.io/categories/Web/"/>
    
    
      <category term="Server" scheme="https://uinika.github.io/tags/Server/"/>
    
  </entry>
  
  <entry>
    <title>Web 前端开发遵循的一些规范与约定</title>
    <link href="https://uinika.github.io/Web/Convention.html"/>
    <id>https://uinika.github.io/Web/Convention.html</id>
    <published>2020-05-21T13:39:03.814Z</published>
    <updated>2020-05-21T13:39:03.814Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;开发团队当前正在全面切换到&lt;code&gt;ES6 + Vue/React + Webpack&lt;/code&gt;这套技术栈，小伙伴们在开发过程中对编码规范以及 ES6 使用约定方面存在诸多困惑，所以参考了 Github 以及互联网企业 UED 的相关技术文档，结合团队之前积累的大量开发约定和范式，整理了这篇 &lt;strong&gt;code style&lt;/strong&gt; 并且&lt;a href=&quot;https://uinika.github.io/&quot;&gt;开源&lt;/a&gt;出来，计划在 Team 小伙伴们熟练掌握以后，逐步在项目中推广使用 &lt;a href=&quot;https://eslint.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ESLint&lt;/a&gt; 校验代码风格。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Web/Convention/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文撰写过程中参考了爱彼迎的 &lt;a href=&quot;https://github.com/airbnb/javascript&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Airbnb JavaScript Style Guide》&lt;/a&gt;，以及网易 NEC 团队的&lt;a href=&quot;http://nec.netease.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《CSS 基础库命名约定》&lt;/a&gt;等开源规范，结合笔者之前撰写的 &lt;a href=&quot;/Web/Html.html&quot;&gt;《HTML5 语义化标签概览》&lt;/a&gt;一文，总体上分为&lt;code&gt;总体原则&lt;/code&gt;、&lt;code&gt;JavaScript/ES6&lt;/code&gt;、&lt;code&gt;CSS/SCSS&lt;/code&gt;、&lt;code&gt;HTML&lt;/code&gt;四个部分，分门别类的从命名约定、选择器使用、DOM 结构组织等纬度进行阐述，以帮助小组成员形成良好的编码习惯。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://uinika.github.io/categories/Web/"/>
    
    
      <category term="Convention" scheme="https://uinika.github.io/tags/Convention/"/>
    
  </entry>
  
  <entry>
    <title>为什么认为 Backbone 是现代化前端框架的基石</title>
    <link href="https://uinika.github.io/Web/Backbone.html"/>
    <id>https://uinika.github.io/Web/Backbone.html</id>
    <published>2020-05-21T13:39:03.798Z</published>
    <updated>2020-05-21T13:39:03.798Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;伴随着 W3C 协议规范的不断更新，以及现代化浏览器技术的快速进步，Web 前端技术整体取得了日新月异发展，交互体验更加丰富与多样化，与此同时业务逻辑也在极速的膨胀。开发人员函需从大量 DOM 底层处理的劳动中解放出来，更加从容的面对纷繁复杂的各式交互需求。本文开头先简单的梳理一下历史，然后基于现代化前端框架的主要特性，逐一与 Backbone 进行比较和剖析。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Web/Backbone/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;从前端技术发展趋势的角度而言，目前层出不穷的现代化前端框架的诞生，都可以认为是 Angular 和 Backbone 等古典前端框架设计思想走向融合之后的产物。虽然截至到本文执笔的时间点，Backbone 已经略微&lt;strong&gt;old school&lt;/strong&gt;，但之所以依然单独对 Backbone 着重笔墨，主要是在&lt;strong&gt;组件化&lt;/strong&gt;和&lt;strong&gt;作用域控制&lt;/strong&gt;等方面，Backbone 更加接近于现代化前端框架的设计理念，而这两点又正好是同一时期的 Angular 并没有解决好的问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://uinika.github.io/categories/Web/"/>
    
    
      <category term="JavaScript" scheme="https://uinika.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS 2.1 典型概念与布局详解</title>
    <link href="https://uinika.github.io/Web/CSS2.html"/>
    <id>https://uinika.github.io/Web/CSS2.html</id>
    <published>2020-05-21T13:39:03.798Z</published>
    <updated>2020-05-21T13:39:03.798Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本文详细参考&lt;a href=&quot;http://nec.netease.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;网易 NEC 前端开源项目&lt;/a&gt;、&lt;a href=&quot;https://www.apress.com/cn/book/9781430223979&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《CSS Mastery》&lt;/a&gt;、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mozilla 开发者社区&lt;/a&gt;，将 &lt;strong&gt;CSS 2.1&lt;/strong&gt; 当中常用的概念与典型布局进行了比较全面的梳理与概括，并对&lt;code&gt;定位&lt;/code&gt;、&lt;code&gt;居中&lt;/code&gt;、&lt;code&gt;外边距塌陷&lt;/code&gt;、&lt;code&gt;包含块&lt;/code&gt;、&lt;code&gt;多列布局&lt;/code&gt;等较易混淆的内容，进行了详实的文字说明与代码示例。在涵盖日常开发当中经典布局的同时，也加入了 HTML/CSS 渲染的重绘与回流等更为深入的主题，是笔者 Web 前端开发工作经验的回顾与总结。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Web/CSS2/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt; 层叠样式表（&lt;em&gt;Cascading Stylesheet&lt;/em&gt;）用于指定浏览器所渲染的样式（&lt;em&gt;如颜色、定位、装饰&lt;/em&gt;），距离 2011 年 &lt;strong&gt;CSS 2.1&lt;/strong&gt; 版本发布至今，已经整整过去&lt;strong&gt;6&lt;/strong&gt;个年头，浏览器和前端技术经历了日新月异的变化。虽然目前 &lt;strong&gt;CSS 3.0&lt;/strong&gt; 规范在选择器、弹性盒模型、动画与过渡方面进行了诸多增强，但是 &lt;a href=&quot;https://www.w3.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;W3C 规范&lt;/a&gt;始终保持着一致的继承性，所以 &lt;strong&gt;CSS 2.1&lt;/strong&gt; 及之前版本规范中提出的大量特性与概念依旧得以沿用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://uinika.github.io/categories/Web/"/>
    
    
      <category term="CSS" scheme="https://uinika.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>异步事件管理：从 Promise 与 async/await 到 RxJS</title>
    <link href="https://uinika.github.io/Web/Async.html"/>
    <id>https://uinika.github.io/Web/Async.html</id>
    <published>2020-05-21T13:39:03.798Z</published>
    <updated>2020-05-21T13:39:03.798Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;早期的浏览器端异步编程主要依靠&lt;code&gt;回调函数&lt;/code&gt;、&lt;code&gt;事件监听&lt;/code&gt;、&lt;code&gt;发布/订阅&lt;/code&gt;、&lt;code&gt;Promise的各类polyfill&lt;/code&gt;这四种方式进行，ES6 推出之后在完整实现了 Promise 规范的同时，还引入了&lt;code&gt;Generator&lt;/code&gt;函数及其衍生的&lt;code&gt;async/await&lt;/code&gt;语法糖，将 JavaScript 异步编程带入了全新阶段。而随后诞生的&lt;a href=&quot;http://reactivex.io/rxjs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;rxjs&lt;/a&gt;则进一步改善了 JavaScript 异步编程的体验。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Web/Async/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文按照前端异步编程技术发展的时间线，以 ES6 Promise 规范作为起点，逐步引出 async/await，最后探讨 RxJS 的使用，并对三者之间使用上的优缺点进行了横向的比较。本文撰写过程中出于严谨性方面的考量，Promise API 方面的内容翻译自&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Mozilla Promise Reference》&lt;/a&gt;，关于 Promise 状态的截图部分引用自&lt;a href=&quot;http://liubin.org/promises-book/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《JavaScript Promise 迷你书》&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Web" scheme="https://uinika.github.io/categories/Web/"/>
    
    
      <category term="JavaScript" scheme="https://uinika.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
