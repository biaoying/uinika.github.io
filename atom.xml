<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bit by bit</title>
  
  <subtitle>Electronics, Embedded &amp; Web</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://uinika.github.io/"/>
  <updated>2020-10-13T19:37:29.216Z</updated>
  <id>https://uinika.github.io/</id>
  
  <author>
    <name>Hank</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>现代模拟电子技术应用笔记</title>
    <link href="https://uinika.github.io/Electronics/Analog.html"/>
    <id>https://uinika.github.io/Electronics/Analog.html</id>
    <published>2020-10-13T19:34:34.111Z</published>
    <updated>2020-10-13T19:37:29.216Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;电子技术发展至今，基础理论方面的突破甚少，进步主要体现在工艺、材料与制程方面。特别是大规模集成电路的广泛应用，过去需要采用大量分立式元器件才能完成的工作，都已经被标准化的模拟、数字集成电路所替代。电子工程师的日常工作内容，逐步从过去各类基础电路的搭建，切换至电子自动化设计&lt;strong&gt;EDA&lt;/strong&gt;（Electronic Design Automation）、信号完整性&lt;strong&gt;SI&lt;/strong&gt;（Signal Integrity）、电磁兼容性&lt;strong&gt;EMC&lt;/strong&gt;（Electro Magnetic Compatibility）等方面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Electronics/Analog/logo.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;模拟电子技术作为现代电子工业的理论基石，主要围绕&lt;code&gt;双极性结型晶体管&lt;/code&gt; &lt;strong&gt;BJT&lt;/strong&gt;、&lt;code&gt;场效应晶体管&lt;/code&gt; &lt;strong&gt;FET&lt;/strong&gt; 构成的&lt;strong&gt;模拟信号&lt;/strong&gt;放大电路展开，着重分析了其&lt;strong&gt;频率响应&lt;/strong&gt;以及&lt;strong&gt;负反馈&lt;/strong&gt;等特性。伴随近年碳化硅、氮化镓等第三代半导体材料在新能源汽车等领域的广泛应用，模拟电子元件在体积、效率、可靠性方面都取得了显著的提高，本文在写作过程当中参考了《Electronic Devices and Circuit Theory》第 11 版一书。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Electronics" scheme="https://uinika.github.io/categories/Electronics/"/>
    
    
      <category term="Analog" scheme="https://uinika.github.io/tags/Analog/"/>
    
  </entry>
  
  <entry>
    <title>开源 EDA 工具 KiCad 5.1.6 电路设计小书</title>
    <link href="https://uinika.github.io/Electronics/KiCad.html"/>
    <id>https://uinika.github.io/Electronics/KiCad.html</id>
    <published>2020-10-13T19:26:53.045Z</published>
    <updated>2020-10-13T19:28:43.253Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;对于国内中小型电子企业的工程师而言，Altium Designer、Pads、Allegro 等商业 EDA 工具的授权费用过于昂贵，且大部分仅提供了 Windows 操作系统版本，缺乏相应的跨平台支持。在电子行业版权问题逐步受到重视的今天，一款易使用、低成本的 EDA 工具对于广大电子工程师显得尤为重要。而 PCB 设计流程与布局布线经验超越 EDA 工具本身，如果没有丰富的元件库与封装库支持，也会面临无米难为炊的困境。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Electronics/KiCad/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文介绍的&lt;a href=&quot;https://kicad-pcb.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;KiCad&lt;/a&gt; 是一款基于 &lt;strong&gt;GPL&lt;/strong&gt; 开源许可下的跨平台 EDA 电子设计自动化工具集，能够处理多达 32 个铜层、14 个技术层、4 个辅助层的 PCB 电路板，并且生成加工制造所需要的所有文件（包括照片绘图仪的 Gerber 文件、钻孔文件、元件位置文件等），官方开源社区提供并维护了丰富的第三方库可供选用，而针对开源 EDA 工具普遍存在的自动布线功能偏弱的问题，KiCad 也通过&lt;a href=&quot;https://freerouting.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FreeRouting&lt;/a&gt;提供了有力支持。文中所涉及原理图与 PCB 样图，皆已共享至笔者的 Github 项目&lt;a href=&quot;https://github.com/uinika/abrams&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Abrams&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Electronics" scheme="https://uinika.github.io/categories/Electronics/"/>
    
    
      <category term="EDA" scheme="https://uinika.github.io/tags/EDA/"/>
    
  </entry>
  
  <entry>
    <title>电路分析涉及的理论与定理</title>
    <link href="https://uinika.github.io/Electronics/Analysis.html"/>
    <id>https://uinika.github.io/Electronics/Analysis.html</id>
    <published>2020-10-13T19:26:53.042Z</published>
    <updated>2020-10-13T19:26:53.044Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;电路分析&lt;/strong&gt;作为电子信息工程技术专业的的先导课程，主要讨论电路当中的电磁现象及其发生过程，其理论与工程实践紧密相连，分析过程中需要注意&lt;strong&gt;电路模型&lt;/strong&gt;与&lt;strong&gt;实际电路&lt;/strong&gt;、&lt;strong&gt;测量值&lt;/strong&gt;与&lt;strong&gt;计算值&lt;/strong&gt;的差别与联系。由于电路分析技术的本质是数学在电路当中的应用，因此学习过程需要注重将电路分析方法与数学知识相结合。此外，由于每一种电路模型都具备特定的工作条件，所以 在分析过程当中，还需要根据不同工作场景选择合适的电路模型。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Electronics/Analysis/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文涵括了&lt;strong&gt;线性电路&lt;/strong&gt;相关的&lt;code&gt;基本概念与两类约束&lt;/code&gt;、&lt;code&gt;电路的等效变换&lt;/code&gt;、&lt;code&gt;电阻电路的分析方法&lt;/code&gt;、&lt;code&gt;常用电路定理&lt;/code&gt;，同时也介绍了&lt;code&gt;动态电路的暂态分析&lt;/code&gt;、&lt;code&gt;正弦交流电路稳态分析&lt;/code&gt;、&lt;code&gt;含二端口元件电路分析&lt;/code&gt;等&lt;strong&gt;动态电路&lt;/strong&gt;方面的内容，阅读前应具备&lt;code&gt;微分&lt;/code&gt;、&lt;code&gt;积分&lt;/code&gt;、&lt;code&gt;微分方程&lt;/code&gt;、&lt;code&gt;复数运算&lt;/code&gt;、&lt;code&gt;线性代数方程组&lt;/code&gt;、&lt;code&gt;矩阵&lt;/code&gt;、&lt;code&gt;傅里叶级数&lt;/code&gt;等&lt;strong&gt;数学&lt;/strong&gt;知识。全文撰写过程当中，参考并且借鉴了国外大学所普遍采用的《Electric Circuits》第 10 版教材。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Electronics" scheme="https://uinika.github.io/categories/Electronics/"/>
    
    
      <category term="Analysis" scheme="https://uinika.github.io/tags/Analysis/"/>
    
  </entry>
  
  <entry>
    <title>通用 LaTeX 数学公式语法手册</title>
    <link href="https://uinika.github.io/Zen/LaTex.html"/>
    <id>https://uinika.github.io/Zen/LaTex.html</id>
    <published>2020-10-13T19:26:12.393Z</published>
    <updated>2020-10-13T19:26:12.394Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.mathjax.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;MathJax&lt;/strong&gt;&lt;/a&gt; 是一款运行于 Web 浏览器当中的开源 JavaScript 数学符号渲染引擎，通过它可以方便的在现代 Web 浏览器当中显示数学公式，目前已经能够解析 &lt;code&gt;LaTex&lt;/code&gt;、&lt;code&gt;MathML&lt;/code&gt; 等标记语言。&lt;strong&gt;MathJax&lt;/strong&gt; 项目发源于 2009 年，目前由 NumFOCUS 基金会主持，并且得到了 MathJax 联盟的支持，该联盟是&lt;strong&gt;美国数学协会&lt;/strong&gt;（AMS）和 &lt;strong&gt;工业与应用数学协会&lt;/strong&gt;（SIAM）的共同合资企业。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Zen/LaTex/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.latex-project.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;LaTeX&lt;/strong&gt;&lt;/a&gt; 是一种高质量的排版格式，可以生成复杂的表格与数学公式，是当前电子与数学出版行业的事实标准。本文以 &lt;a href=&quot;https://www.pandoc.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Pandoc&lt;/strong&gt;&lt;/a&gt; 作为 LaTex 渲染引擎（一款用于标记语言文档转换的命令行工具），分门别类的总结了撰写数学公式所需要经常使用到的 LaTeX 语法，方便写作相关科技类文章时随手查阅。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Zen" scheme="https://uinika.github.io/categories/Zen/"/>
    
    
      <category term="Markdown" scheme="https://uinika.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>玩转 Raspberry Pi 4B 开源硬件</title>
    <link href="https://uinika.github.io/Embedded/RaspberryPi.html"/>
    <id>https://uinika.github.io/Embedded/RaspberryPi.html</id>
    <published>2020-10-13T19:26:12.383Z</published>
    <updated>2020-10-13T19:26:12.383Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;万众期待的 &lt;strong&gt;Raspberry Pi 4B&lt;/strong&gt; 终于发布，之前由于产品原型的需要，一直计划采购 &lt;strong&gt;3B+&lt;/strong&gt;，后来供应商透露新版 &lt;strong&gt;4B&lt;/strong&gt; 稍晚就会面市，所以稍微等待了一段时间，今天终于拿到了一块 &lt;strong&gt;2G&lt;/strong&gt; 内存的板子。一直以为 &lt;strong&gt;4B&lt;/strong&gt; 只会简单的更新一下 SoC 并增大 &lt;strong&gt;DDR&lt;/strong&gt; 容量，但是实际上还带来了 &lt;strong&gt;Type-C&lt;/strong&gt;、&lt;strong&gt;Bluetooth 5.0&lt;/strong&gt;、&lt;strong&gt;Micro HDMI&lt;/strong&gt;、&lt;strong&gt;USB 3.0&lt;/strong&gt; 乃至 &lt;strong&gt;DDR4&lt;/strong&gt; 等诸多崭新升级。而官方推荐的应用范围，开始从教育渗透至工业领域，逐步发展为一套完整的嵌入式生态链。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Embedded/RaspberryPi/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文基于树莓派基金会官方提供的 &lt;a href=&quot;https://www.raspberrypi.org/documentation/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Raspberry Pi Documentation》&lt;/a&gt;，笔者翻译了其中较为常用的配置章节，便于读者拿到板子以后能够快速上手，并避免使用一些官方不推荐的操作和工具库。此外，本文也会涉及 &lt;code&gt;OpenCV&lt;/code&gt;、&lt;code&gt;dlib&lt;/code&gt; 的编译，以及 &lt;code&gt;Electron&lt;/code&gt; 在树莓派上的部署等话题。文章内容将会伴随笔者的日常使用而长期进行更新，欢迎各位爱好者朋友持续关注与勘误。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Embedded" scheme="https://uinika.github.io/categories/Embedded/"/>
    
    
      <category term="MCU" scheme="https://uinika.github.io/tags/MCU/"/>
    
  </entry>
  
  <entry>
    <title>玩转 Arduino Uno、Mega、Due 开源硬件</title>
    <link href="https://uinika.github.io/Embedded/Arduino.html"/>
    <id>https://uinika.github.io/Embedded/Arduino.html</id>
    <published>2020-10-13T19:26:12.381Z</published>
    <updated>2020-10-13T19:26:12.382Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.arduino.cc/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Arduino&lt;/strong&gt;&lt;/a&gt; 是一款目前非常成熟的物联网产品原型开发工具，其硬件设计、IDE 工具、微控制器核心库皆基于开源协议发布，其中，&lt;strong&gt;Eagle&lt;/strong&gt; 原理图以及 PCB 布线遵循 &lt;code&gt;Creative Commons Attribution Share-Alike&lt;/code&gt; 许可，而 IDE 环境的源代码基于 &lt;code&gt;GPL&lt;/code&gt; 协议，微控制器的 C/C++ 库则是基于 &lt;code&gt;LGPL&lt;/code&gt; 协议。自从 2005 年首块 Arduino 开发板发布以来，已经推出了众多满足不同需求的硬件以及软件库，开源社区也日渐活跃与丰富。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Embedded/Arduino/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Arduino Uno&lt;/strong&gt; 是整个 Arduino 家族当中使用最为广泛、文档最为齐全的一款硬件产品，基于 Microchip 微芯公司的 &lt;strong&gt;8&lt;/strong&gt; 位 &lt;strong&gt;AVR&lt;/strong&gt; 单片机 &lt;a href=&quot;http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-7810-Automotive-Microcontrollers-ATmega328P_Datasheet.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;ATmega328P&lt;/strong&gt;&lt;/a&gt;，工作电压为&lt;code&gt;5V&lt;/code&gt;，采用&lt;code&gt;16MHz&lt;/code&gt;的无源谐振器，并拥有&lt;code&gt;32 KB&lt;/code&gt;的 &lt;strong&gt;Flash&lt;/strong&gt; 存储器（其中&lt;code&gt;0.5KB&lt;/code&gt;用于&lt;code&gt;Bootloader&lt;/code&gt;程序），以及&lt;code&gt;2KB&lt;/code&gt;的 &lt;strong&gt;SRAM&lt;/strong&gt; 和&lt;code&gt;1KB&lt;/code&gt;的 &lt;strong&gt;EEPROM&lt;/strong&gt;。本文采用的 Arduino 硬件是于 2011 年发布的 &lt;a href=&quot;https://store.arduino.cc/usa/arduino-uno-rev3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Arduino Uno R3&lt;/strong&gt;&lt;/a&gt; 版本，是当前国内市场运用最为广泛的一款型号。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Embedded" scheme="https://uinika.github.io/categories/Embedded/"/>
    
    
      <category term="MCU" scheme="https://uinika.github.io/tags/MCU/"/>
    
  </entry>
  
  <entry>
    <title>Qt 5 桌面应用程序开发指南 - QtWidgets 篇</title>
    <link href="https://uinika.github.io/Linux/Qt-Widgets.html"/>
    <id>https://uinika.github.io/Linux/Qt-Widgets.html</id>
    <published>2020-10-13T19:21:25.777Z</published>
    <updated>2020-10-13T19:21:25.778Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.qt.io/offline-installers&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Qt 5.14.2&lt;/strong&gt;&lt;/a&gt; 是跨平台应用开发框架 Qt 的最新版本，除了采用基于 &lt;strong&gt;C++11&lt;/strong&gt; 的经典 &lt;a href=&quot;https://doc.qt.io/qt-5/qtwidgets-index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Qt Widgets&lt;/strong&gt;&lt;/a&gt; 进行桌面应用程序开发以外，还支持通过 &lt;strong&gt;Qt Quick&lt;/strong&gt; 快速开发适用于移动端设备的用户界面，因为 Qt 5 底层图形渲染引擎基于 GPU 硬件加速，所以其能够保持与原生 &lt;strong&gt;C++&lt;/strong&gt; 近乎等同的运行效率。笔者计划通过两篇文章分别对这 2 种技术进行介绍，但是无论如何，在传统跨平台桌面应用开发领域，&lt;strong&gt;Qt Widgets&lt;/strong&gt; 依然是 Qt5 最为基础与核心的内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Linux/Qt-Widgets/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;虽然 Qt 6 发布在即，但是官方声明将会依然保持 API 的兼容与稳定性，因此本文依然基于当前最新的 Qt5 稳定版本撰写。全文将会分别对 &lt;strong&gt;Qt Widgets&lt;/strong&gt; 当中使用较为频繁的&lt;code&gt;窗口部件&lt;/code&gt;、&lt;code&gt;布局管理&lt;/code&gt;、&lt;code&gt;应用主窗口&lt;/code&gt;、&lt;code&gt;事件系统&lt;/code&gt;、&lt;code&gt;对象模型&lt;/code&gt;、&lt;code&gt;风格与样式&lt;/code&gt;、&lt;code&gt;国际化&lt;/code&gt;等部分内容进行深入介绍，同时展示完善的示例代码以及程序运行效果，并结合&lt;a href=&quot;./embedded/Qt-Quick.html&quot;&gt;《QtQuick 篇》&lt;/a&gt;一文讲解混合编程相关的技术。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Qt" scheme="https://uinika.github.io/categories/Qt/"/>
    
    
      <category term="Desktop" scheme="https://uinika.github.io/tags/Desktop/"/>
    
  </entry>
  
  <entry>
    <title>Qt 5 桌面应用程序开发指南 - QtQuick 篇</title>
    <link href="https://uinika.github.io/Linux/Qt-Quick.html"/>
    <id>https://uinika.github.io/Linux/Qt-Quick.html</id>
    <published>2020-10-13T19:21:25.774Z</published>
    <updated>2020-10-13T19:21:25.775Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;由于 Material Style 这样富含动画效果的用户界面风格，并不能简单的加入到以静态图形作为主要显示单元的&lt;code&gt;QWidget&lt;/code&gt;当中。所以 &lt;strong&gt;Qt&lt;/strong&gt; 官方推出了一种声明式编程语言 &lt;a href=&quot;https://doc.qt.io/qt-5/qtqml-index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;QML&lt;/strong&gt;&lt;/a&gt;（Qt 元对象语言，Qt Meta-Object Language），其提供了一种具有更高可读性的声明式语法，并附带了必要的 JavaScript 语句和动态属性绑定支持。QML 的语言特性和引擎框架由 &lt;code&gt;Qt QML&lt;/code&gt; 模块提供，该模块同时提供了 &lt;strong&gt;QML&lt;/strong&gt; 和 &lt;strong&gt;C++&lt;/strong&gt; 两套接口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Linux/Qt-Quick/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://doc.qt.io/qt-5/qtquick-index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Qt Quick&lt;/strong&gt;&lt;/a&gt; 是一款基于 QML 的应用程序标准库，包含有可视化类型、交互类型、动画、模型和视图、粒子特效等特性，这些都是由 Qt5 上的&lt;code&gt;Qt Quick&lt;/code&gt;模块提供，通过&lt;code&gt;import&lt;/code&gt;语句即可方便的进行导入。Qt Quick 同样提供了 &lt;strong&gt;QML&lt;/strong&gt; 和 &lt;strong&gt;C++&lt;/strong&gt; 两套接口，可以轻松构建具有流畅动画效果的动态 QML 用户界面。而 Qt 5.7 版本以后推出的 &lt;a href=&quot;https://doc.qt.io/qt-5/qtquickcontrols-index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Qt Quick Controls&lt;/strong&gt;&lt;/a&gt; 更是提供了丰富的开箱即用控件，让快速开发成为了可能。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Qt" scheme="https://uinika.github.io/categories/Qt/"/>
    
    
      <category term="Desktop" scheme="https://uinika.github.io/tags/Desktop/"/>
    
  </entry>
  
  <entry>
    <title>意法半导体 Nucleo F767ZI 评估板测试</title>
    <link href="https://uinika.github.io/Embedded/NucleoF767ZI.html"/>
    <id>https://uinika.github.io/Embedded/NucleoF767ZI.html</id>
    <published>2020-10-13T19:21:25.762Z</published>
    <updated>2020-10-13T19:22:53.317Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;意法半导体提供的&lt;a href=&quot;https://www.st.com/zh/evaluation-tools/nucleo-f767zi.html&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
    
      <category term="Embedded" scheme="https://uinika.github.io/categories/Embedded/"/>
    
    
      <category term="MCU" scheme="https://uinika.github.io/tags/MCU/"/>
    
  </entry>
  
  <entry>
    <title>基于三星 S3C2440 的嵌入式 Linux 攻略</title>
    <link href="https://uinika.github.io/Embedded/Mini2440.html"/>
    <id>https://uinika.github.io/Embedded/Mini2440.html</id>
    <published>2020-10-13T19:21:25.761Z</published>
    <updated>2020-10-13T19:21:25.761Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;由于 Linux 操作系统内核具备可裁剪定制的特性，因而能够运行于 ARM 架构的嵌入式设备当中。伴随近几年，硬件性能的飞速提升以及价格的快速下降，&lt;code&gt;Raspberry Pi&lt;/code&gt;、&lt;code&gt;Nano Pi&lt;/code&gt;、&lt;code&gt;Rock Pi&lt;/code&gt;、&lt;code&gt;Orange Pi&lt;/code&gt;等可运行完整桌面 Linux 操作系统的卡片电脑大量涌现，通用计算机与嵌入式系统之间的界限愈来愈模糊。各个 IC 厂家不断提升 MCU 性能的同时，也推出了相应的公版外围电路、通用操作系统、驱动程序支持等一揽子完善的嵌入式技术解决方案，与笔者七年以前接触嵌入式技术伊始，早已经不可同日而语。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Embedded/Mini2440/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;笔者手上这款 Mini2440 开发板于 2013 年购置，是由广州友善电子科技有限公司于 2010 年推出的 ARM9 开发板，虽然板载的三星 S3C2440 嵌入式微处理器已然廉颇老矣，且对应的&lt;code&gt;Linux 2.6.32.2&lt;/code&gt;内核版本也早已壮士暮年。但由于最近涉及 Linux 嵌入式操作系统相关的工作，因此重新上电使用，同时以怀旧心态执笔撰写本文，用于记录一些心得体会，同时也作为日后备忘。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Embedded" scheme="https://uinika.github.io/categories/Embedded/"/>
    
    
      <category term="MCU" scheme="https://uinika.github.io/tags/MCU/"/>
    
  </entry>
  
  <entry>
    <title>J-Link 仿真器固件恢复小记</title>
    <link href="https://uinika.github.io/Embedded/JLink.html"/>
    <id>https://uinika.github.io/Embedded/JLink.html</id>
    <published>2020-10-13T19:21:25.760Z</published>
    <updated>2020-10-13T19:21:25.760Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;JTAG（&lt;em&gt;Joint Test Action Group，联合测试行动组&lt;/em&gt;）是一种用于芯片内部测试的国际标准协议，&lt;strong&gt;ARM&lt;/strong&gt;、&lt;strong&gt;DSP&lt;/strong&gt;、&lt;strong&gt;FPGA&lt;/strong&gt;等主流 IC 都对其提供了良好支持，标准 JTAG 接口拥有&lt;code&gt;TMS&lt;/code&gt;模式选择、&lt;code&gt;TCK&lt;/code&gt;时钟、&lt;code&gt;TDI&lt;/code&gt;数据输入、&lt;code&gt;TDO&lt;/code&gt;数据输出共 4 条信号线。笔者当前使用的 Mini2440 开发板原厂提供的 JTAG 调试器是采用并口的&lt;a href=&quot;http://www.hjtag.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;H-JTAG&lt;/a&gt;，由于现在的计算机设备早已经不提供并口支持，因此笔者选择了较为通用的&lt;strong&gt;J-Link&lt;/strong&gt;作为 ARM9 仿真调试器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Embedded/JLink/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;J-Link&lt;/strong&gt;是德国&lt;a href=&quot;https://www.segger.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SEGGER&lt;/a&gt;公司推出的一款专用于 ARM 内核微控制器的 JTAG 仿真调试设备，能够与 ARM 官方提供的 Keil 集成开发环境无缝衔接，支持 Cortex-A/R、Cortex-M、ARM7、ARM9、ARM11、Renesas RX、Microchip PIC、Silicon Labs 8051、RISC-V 等系列的微控制器。笔者 7 年前购置了一台 J-Link V8 版本的&lt;strong&gt;J-Link&lt;/strong&gt;调试器，当时由于使用不当造成固件丢失，因此特别撰写此文来记录一下固件恢复的过程。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Embedded" scheme="https://uinika.github.io/categories/Embedded/"/>
    
    
      <category term="MCU" scheme="https://uinika.github.io/tags/MCU/"/>
    
  </entry>
  
  <entry>
    <title>实用模拟 &amp; 数字电路电子技术导论</title>
    <link href="https://uinika.github.io/Electronics/Introduct.html"/>
    <id>https://uinika.github.io/Electronics/Introduct.html</id>
    <published>2020-10-13T18:50:57.775Z</published>
    <updated>2020-10-13T19:35:03.317Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;自本世纪六十年代开始，数字半导体技术席卷了全球电子工业，伴随工艺与制程的持续演进，高频高速电子信号的处理需求愈加旺盛，电子技术的发展重心逐步由模拟时代，过渡至全面的数字化阶段。虽然模拟电路以及分立式电子元器件的使用频率逐年下降，但是在电磁兼容性处理、开关电源设计等场景当中，传统的模拟电子技术以及相关分立式元器件依然扮演着不可或缺的角色。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Electronics/Introduct/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文定位为一篇&lt;strong&gt;导论&lt;/strong&gt;性质的文章，用于帮助当前开发团队里的嵌入式软件工程师，快速了解模拟数字电子技术相关的术语与概念，因此行文中并不涉及各类电路原理的深入数学分析，仅仅言简意赅的汇总了日常工作相关的模拟、数字电路知识。文章中的部分公式与原理图摘取自&lt;a href=&quot;https://zh.wikipedia.org/wiki/Wikipedia&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;维基百科&lt;/a&gt;，写作过程当中参考了《Practical Electronics》第 4 版一书。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Electronics" scheme="https://uinika.github.io/categories/Electronics/"/>
    
    
      <category term="Wikipedia" scheme="https://uinika.github.io/tags/Wikipedia/"/>
    
  </entry>
  
  <entry>
    <title>基于 HAL 与 CubeIDE 的 STM32F103ZET6 开发指南</title>
    <link href="https://uinika.github.io/Embedded/STM32F103ZET6.html"/>
    <id>https://uinika.github.io/Embedded/STM32F103ZET6.html</id>
    <published>2020-10-13T18:37:02.652Z</published>
    <updated>2020-10-13T18:37:02.652Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;相对于采用 LQFP48 封装的 &lt;strong&gt;STM32F103C8T6&lt;/strong&gt; 微控制器，采用 LQFP144 封装的 &lt;strong&gt;STM32F103ZET6&lt;/strong&gt; 时钟频率虽然同为&lt;code&gt;72MHz&lt;/code&gt;，但提供了更加丰富的片上外设资源，例如高达&lt;code&gt;512Kbytes&lt;/code&gt;的 &lt;strong&gt;Flash&lt;/strong&gt; 程序存储器和&lt;code&gt;64Kbytes&lt;/code&gt;的 &lt;strong&gt;SRAM&lt;/strong&gt; 数据存储器，以及 12 通道&lt;code&gt;DMA&lt;/code&gt;控制器，内置 2 个基本定时器 2 个高级定时器 4 个通用定时器，以及 3 个&lt;code&gt;12bit&lt;/code&gt;的 &lt;strong&gt;ADC&lt;/strong&gt; 与 2 个&lt;code&gt;12bit&lt;/code&gt;的 &lt;strong&gt;DAC&lt;/strong&gt; 转换器，同时还支持多达 3 组 &lt;strong&gt;SPI&lt;/strong&gt;、2 组 &lt;strong&gt;I²C&lt;/strong&gt;、 5 组&lt;strong&gt;USART&lt;/strong&gt;、1 组&lt;strong&gt;CAN&lt;/strong&gt;、1 组 &lt;strong&gt;SDIO&lt;/strong&gt; 接口和 1 组全速 &lt;strong&gt;USB2.0&lt;/strong&gt; 接口。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Embedded/STM32F103ZET6/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文基于 &lt;strong&gt;ST&lt;/strong&gt; 官方近年力推的 &lt;strong&gt;HAL&lt;/strong&gt;（Hardware Abstraction Layer）与 &lt;strong&gt;LL&lt;/strong&gt;（Low-layer）开发库，结合 &lt;strong&gt;STM32CubeIDE&lt;/strong&gt; 提供的图形化配置工具，参考意法半导体官方文档《STM32F103xE Data Sheet》和《STM32F103xx Reference Manual》以及《Description of STM32F1 HAL &amp;amp; LL drivers》，并且结合《ARM Cortex-M3 &amp;amp; Cortex-M4 权威指南》一书，对于微控制器片上外设资源的编程方法进行了详细的分析与示例。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Embedded" scheme="https://uinika.github.io/categories/Embedded/"/>
    
    
      <category term="MCU" scheme="https://uinika.github.io/tags/MCU/"/>
    
  </entry>
  
  <entry>
    <title>Android 物联网应用开发实例</title>
    <link href="https://uinika.github.io/Embedded/Android.html"/>
    <id>https://uinika.github.io/Embedded/Android.html</id>
    <published>2020-10-13T18:37:02.636Z</published>
    <updated>2020-10-13T18:37:02.636Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developer.android.google.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Android&lt;/strong&gt;&lt;/a&gt; 可以采用 Kotlin、Java、C++ 语言编写应用程序，&lt;a href=&quot;https://developer.android.google.cn/reference&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android SDK&lt;/a&gt; 会将这些代码连同相应的数据和资源文件编译为 Android 软件包，即一个带有&lt;code&gt;.apk&lt;/code&gt;后缀的归档文件，也就是 Android 应用程序的安装文件。本质上 Android 系统是一种多用户的 Linux 系统，每个应用程序都运行在独立的 Linux 用户 &lt;strong&gt;ID&lt;/strong&gt; 和&lt;strong&gt;进程&lt;/strong&gt;之下，从而为每个 Android 应用都提供了独立的&lt;strong&gt;安全沙盒&lt;/strong&gt;，体现了最小权限的设计原则。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Embedded/Android/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;鉴于 Google 官方提供了完善的文档，本文并不过多过深的涉及 Android SDK 开发的具体知识细节，仅会在简单介绍 Android 开发当中的一些基本概念之后，着重分析&lt;strong&gt;经典/低功耗蓝牙&lt;/strong&gt;、&lt;strong&gt;NFC&lt;/strong&gt;、&lt;strong&gt;WIFI&lt;/strong&gt;、&lt;strong&gt;指纹识别&lt;/strong&gt;、&lt;strong&gt;5G&lt;/strong&gt; 等硬件外设的通信协议概念以及相应的实现步骤，并且展示一些比较典型的应用场景与示例代码，从而为读者在进行物联网相关项目的开发时，在移动设备应用控制端提供即有的现成经验。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Embedded" scheme="https://uinika.github.io/categories/Embedded/"/>
    
    
      <category term="Mobile" scheme="https://uinika.github.io/tags/Mobile/"/>
    
  </entry>
  
  <entry>
    <title>STLink V2 调试编程器应用图解</title>
    <link href="https://uinika.github.io/Embedded/STLink.html"/>
    <id>https://uinika.github.io/Embedded/STLink.html</id>
    <published>2020-10-13T18:37:02.636Z</published>
    <updated>2020-10-13T18:37:02.636Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;STLink 是由意法半导体公司推出的在线调试编程器，采用&lt;code&gt;5V&lt;/code&gt;的&lt;strong&gt;USB2.0&lt;/strong&gt;全速接口进行供电与数据传输，可以方便的对内部固件进行升级，同时支持以 &lt;strong&gt;JTAG&lt;/strong&gt; 或 &lt;strong&gt;SWD&lt;/strong&gt; 模式连接至 STM32 系列微控制器，或者以 &lt;strong&gt;SWIM&lt;/strong&gt; 模式连接至 STM8 系列微控制器，操作温度介于&lt;code&gt;0 ~ 50℃&lt;/code&gt;之间。由于 ST 公司极为重视中国市场，因此 STLink 的销售价格相对其它国外大厂的在线仿真设备要实惠许多，基本成为国内嵌入式工程师人手上必备的工具。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Embedded/STLink/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文详细介绍 Keil uVision 5 开发环境下 ST-LINK/V2 版本的调试编程器使用方法，并介绍了相关接口的详细定义与接线方法，文中部分内容翻译至意法半导体官方提供的&lt;a href=&quot;https://www.st.com/en/development-tools/st-link-v2.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《用于 STM8 与 STM32 的 ST-LINK/V2 在线调试编程器用户手册》&lt;/a&gt;，以确保使用方法与解释的规范性。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Embedded" scheme="https://uinika.github.io/categories/Embedded/"/>
    
    
      <category term="MCU" scheme="https://uinika.github.io/tags/MCU/"/>
    
  </entry>
  
  <entry>
    <title>宏晶 STC90C516RD+ 数据手册精读</title>
    <link href="https://uinika.github.io/Embedded/STC90C51.html"/>
    <id>https://uinika.github.io/Embedded/STC90C51.html</id>
    <published>2020-10-13T18:37:02.636Z</published>
    <updated>2020-10-13T18:37:02.636Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;8051 微处理器是指兼容&lt;strong&gt;Intel MCS-51&lt;/strong&gt;体系架构的一系列单片机，全球有众多的半导体厂商都有基于这一体系架构的产品，例如：Atmel 的&lt;code&gt;AT89C52&lt;/code&gt;、NXP 的&lt;code&gt;P89V51&lt;/code&gt;、宏晶科技的&lt;code&gt;STC89/90系列&lt;/code&gt;等。截至本篇文章成文之前，意法半导体推出的&lt;code&gt;STM8&lt;/code&gt;系列单片机风头正劲，同为 8 位单片机产品，虽然 8051 在架构、功耗乃至价格上基本已无优势，但作为比较经典的嵌入式微处理器解决方案，依然具备着不错的学习价值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Embedded/STC90C51/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文介绍的&lt;code&gt;STC90C516RD+&lt;/code&gt;属于&lt;code&gt;5V&lt;/code&gt;单片机（&lt;em&gt;工作电压为&lt;code&gt;5.5V-3.3V&lt;/code&gt;&lt;/em&gt;），属于相对比较廉价和常见的国产单片机解决方案，片上拥有&lt;code&gt;中央处理器CPU&lt;/code&gt;、&lt;code&gt;程序存储器Flash&lt;/code&gt;、&lt;code&gt;数据存储器RAM&lt;/code&gt;、&lt;code&gt;定时/计数器&lt;/code&gt;、&lt;code&gt;UART串口&lt;/code&gt;、&lt;code&gt;IO接口&lt;/code&gt;、&lt;code&gt;EEPROM&lt;/code&gt;、&lt;code&gt;看门狗&lt;/code&gt;等常用资源。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Embedded" scheme="https://uinika.github.io/categories/Embedded/"/>
    
    
      <category term="MCU" scheme="https://uinika.github.io/tags/MCU/"/>
    
  </entry>
  
  <entry>
    <title>意法半导体 STM32F103C8T6 标准库典型实例</title>
    <link href="https://uinika.github.io/Embedded/STM32F103C8T6.html"/>
    <id>https://uinika.github.io/Embedded/STM32F103C8T6.html</id>
    <published>2020-10-13T18:37:02.636Z</published>
    <updated>2020-10-13T18:37:02.652Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;笔者半年之前的一篇长文，所介绍的&lt;strong&gt;STC51&lt;/strong&gt;系列单片机是一款结构简单、易于学习的嵌入式微控制器，但是由于标准 8051 架构诞生于 70 年代，其硬件架构、资源数量以及编程方式都已显老旧，成本和性能方面也皆落后于其它架构产品，市场占有率逐步遭到侵蚀，目前仅常见于一些教学与发烧友使用的范畴。伴随近几年物联网行业的快速兴起，&lt;strong&gt;STM32&lt;/strong&gt;等基于 ARM Cortex 内核的微控制器，凭借丰富的片上资源与简单易用的标准外设库，逐步成为消费与工业领域中的主流产品。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Embedded/STM32F103C8T6/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.st.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;意法半导体&lt;/a&gt;成立于 1987 年，由意大利 &lt;strong&gt;S&lt;/strong&gt;GS 和法国 &lt;strong&gt;T&lt;/strong&gt;homson 两家半导体企业合并而成，本文所介绍的&lt;a href=&quot;https://www.st.com/en/microcontrollers-microprocessors/stm32f103c8.html#&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;STM32F103C8T6&lt;/strong&gt;&lt;/a&gt;属于该公司应用极为广泛的型号，其提供的&lt;code&gt;STM32F10x Standard Peripheral Library&lt;/code&gt;标准外设库对 STM32 片上资源进行了完善的封装，相对于 ST 公司目前力推的&lt;strong&gt;HAL/LL&lt;/strong&gt;库，标准外设库更加接近于传统的寄存器操作，因而也较为容易向&lt;a href=&quot;https://www.gigadevice.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;兆易创新&lt;/a&gt;的&lt;a href=&quot;https://www.gigadevice.com/products/microcontrollers/gd32/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;GD32&lt;/strong&gt;&lt;/a&gt;等国产微控制器移植。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Embedded" scheme="https://uinika.github.io/categories/Embedded/"/>
    
    
      <category term="MCU" scheme="https://uinika.github.io/tags/MCU/"/>
    
  </entry>
  
  <entry>
    <title>宏晶 STC89C52RC 微控制器实践小书</title>
    <link href="https://uinika.github.io/Embedded/STC89C52.html"/>
    <id>https://uinika.github.io/Embedded/STC89C52.html</id>
    <published>2020-10-13T18:37:02.636Z</published>
    <updated>2020-10-13T18:37:02.636Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;伴随 NB-IOT、LoRa、5G 等无线物联网通信技术的快速成熟，已经诞生近四十余年的 8051 系列微处理，在功耗、性能、开发难易程度方面，已然全面落后于 ARM Cortex-M3 等主流嵌入式微控制器方案。但是由于其技术架构较为经典，寄存器配置相对简洁，在一些低成本场景中依然有所沿用。笔者当前使用的开发板基于宏晶&lt;strong&gt;STC89C52RC&lt;/strong&gt;嵌入式微控制器方案，虽然购置于六年以前，但是依然集成有各类常用的 UART、I²C、SPI 总线模块。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Embedded/STC89C52/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;笔者日常开发工作当中，经常需要使用到此类嵌入式总线通信协议，因此参考了官方文档以及相关技术资料，逐步将本文涉及的各类模块驱动移植至当前开发板，便于用作与其它嵌入式设备联调测试之用。近几年，意法半导体的&lt;strong&gt;STM32F103C8T6&lt;/strong&gt;量产价格不断下探，已经逐步接近宏晶的&lt;strong&gt;STC8051&lt;/strong&gt;系列产品，可以预见后者将会逐渐面临市场淘汰，作为一款极为经典的 8 位微控制器，用作测试和实验目的依然是不错的选择。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Embedded" scheme="https://uinika.github.io/categories/Embedded/"/>
    
    
      <category term="MCU" scheme="https://uinika.github.io/tags/MCU/"/>
    
  </entry>
  
  <entry>
    <title>基础数字逻辑电子技术备忘录</title>
    <link href="https://uinika.github.io/Electronics/Digital.html"/>
    <id>https://uinika.github.io/Electronics/Digital.html</id>
    <published>2020-10-13T18:37:02.620Z</published>
    <updated>2020-10-13T18:37:02.620Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;二十一世纪，数字化浪潮席卷了电子工业领域，与传统的模拟电子系统相比，数字系统具备更加优异的精确与可靠性，逐步取代了许多模拟电路的应用场景。数字逻辑电路是对数字信号进行算术与逻辑运算的电路，以&lt;s
        
      
    
    </summary>
    
    
      <category term="Electronics" scheme="https://uinika.github.io/categories/Electronics/"/>
    
    
      <category term="Digital" scheme="https://uinika.github.io/tags/Digital/"/>
    
  </entry>
  
  <entry>
    <title>基于 Linux 的 GCC 与 GDB 应用程序调试</title>
    <link href="https://uinika.github.io/Linux/GCC.html"/>
    <id>https://uinika.github.io/Linux/GCC.html</id>
    <published>2020-10-13T18:35:35.658Z</published>
    <updated>2020-10-13T18:35:35.658Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.gnu.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;GNU&lt;/strong&gt;&lt;/a&gt; 的正确发音为&lt;code&gt;[g&#39;noo]&lt;/code&gt;，名称由英文句子&lt;code&gt;GNU&#39;s Not Unix&lt;/code&gt;递归缩写组成，是一项由&lt;a href=&quot;https://www.fsf.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自由软件基金会&lt;/a&gt;推动的操作系统计划。GNU 计划最早开始于 1984 年 1 月，目标是完成一个由&lt;strong&gt;Hurd&lt;/strong&gt;内核与一系列应用程序、系统库、开发工具组成的&lt;strong&gt;GNU 操作系统&lt;/strong&gt;。但由于 Hurd 的开发工作迟迟未能完成，因而普遍选择采用 Linux Kernel 作为操作系统的内核，这一套技术组合正是闻名遐迩的 &lt;strong&gt;GNU/Linux&lt;/strong&gt; 操作系统。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/Linux/GCC/logo.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;由 &lt;a href=&quot;https://gcc.gnu.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;GCC&lt;/strong&gt;&lt;/a&gt; 与 &lt;a href=&quot;http://www.gnu.org/software/gdb/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;GDB&lt;/strong&gt;&lt;/a&gt; 组成的编译套件正是 GNU 计划下诞生的优秀开源项目，也是 GNU/Linux 技术体系不可或缺的构成要素。虽然当前 &lt;a href=&quot;http://clang.llvm.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Clang&lt;/strong&gt;&lt;/a&gt; 与 &lt;a href=&quot;https://www.llvm.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;LLVM&lt;/strong&gt;&lt;/a&gt; 编译套件的发展风头正劲，但是由于嵌入式 Linux 设备通常只提供基于 GCC 的交叉编译工具链，加之两者在使用上差异不大，而 GDB 又同时提供了两者编译后程序的完整 Debug 支持，因而笔者依然选择 &lt;strong&gt;GCC&lt;/strong&gt; 与 &lt;strong&gt;GDB&lt;/strong&gt; 组合来作为本文的撰写的目标。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Note" scheme="https://uinika.github.io/categories/Note/"/>
    
    
      <category term="Linux" scheme="https://uinika.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>
